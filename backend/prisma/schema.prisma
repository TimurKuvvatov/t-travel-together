generator client {
  provider = "prisma-client-js"
  jsTarget = "es2020"
  module = "es"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phone     String   @unique
  createdAt DateTime @default(now())
  role      Role     @default(GUEST)
  
  tripsOwned Trip[]          @relation("TripOwner")
  trips      Trip[]          @relation("TripParticipants")
  messages   ChatMessage[]
  expenses   ExpenseParticipant[]
  debtsFrom  Debt[]           @relation("DebtFrom")
  debtsTo    Debt[]           @relation("DebtTo")
  createdExpenses Expense[]   @relation("ExpenseCreator")
}

enum Role {
  OWNER
  GUEST
}

model Trip {
  id          String         @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  from        String
  to          String
  ownerId     String
  owner       User           @relation("TripOwner", fields: [ownerId], references: [id])
  participants User[]        @relation("TripParticipants")
  expenses    Expense[]
  debts       Debt[]         @relation("TripDebts")
  chat        ChatMessage[]
  createdAt   DateTime       @default(now())
}

model ExpenseCategory {
  id    String   @id @default(cuid())
  name  String
  expenses Expense[]
}

model Expense {
  id          String              @id @default(cuid())
  title       String
  amount      Float
  creatorId   String
  creator     User                @relation("ExpenseCreator", fields: [creatorId], references: [id])
  tripId      String
  trip        Trip                @relation(fields: [tripId], references: [id])
  categoryId  String
  category    ExpenseCategory     @relation(fields: [categoryId], references: [id])
  participants ExpenseParticipant[]
  createdAt   DateTime            @default(now())
  receiptUrl  String?
  messages    ChatMessage[]       @relation("ExpenseMessages")
}

model ExpenseParticipant {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expenseId String
  expense   Expense  @relation(fields: [expenseId], references: [id])
  amountOwed Float
  status    PaymentStatus @default(PENDING)
}

enum PaymentStatus {
  PENDING
  PAID
}

model Debt {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation("TripDebts", fields: [tripId], references: [id])
  fromId    String
  from      User     @relation("DebtFrom", fields: [fromId], references: [id])
  toId      String
  to        User     @relation("DebtTo", fields: [toId], references: [id])
  amount    Float
  reason    String
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model ChatMessage {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  text      String
  expenseId String?   
  expense   Expense? @relation("ExpenseMessages", fields: [expenseId], references: [id])
  createdAt DateTime @default(now())
}
